// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: P2r.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_P2r_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_P2r_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_P2r_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_P2r_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_P2r_2eproto;
namespace p2r {
class ConnectionId;
struct ConnectionIdDefaultTypeInternal;
extern ConnectionIdDefaultTypeInternal _ConnectionId_default_instance_;
class ReleaseRequest;
struct ReleaseRequestDefaultTypeInternal;
extern ReleaseRequestDefaultTypeInternal _ReleaseRequest_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RestoreWarning;
struct RestoreWarningDefaultTypeInternal;
extern RestoreWarningDefaultTypeInternal _RestoreWarning_default_instance_;
class SetupRequest;
struct SetupRequestDefaultTypeInternal;
extern SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
class TerminateCancel;
struct TerminateCancelDefaultTypeInternal;
extern TerminateCancelDefaultTypeInternal _TerminateCancel_default_instance_;
class TerminateWarning;
struct TerminateWarningDefaultTypeInternal;
extern TerminateWarningDefaultTypeInternal _TerminateWarning_default_instance_;
}  // namespace p2r
PROTOBUF_NAMESPACE_OPEN
template<> ::p2r::ConnectionId* Arena::CreateMaybeMessage<::p2r::ConnectionId>(Arena*);
template<> ::p2r::ReleaseRequest* Arena::CreateMaybeMessage<::p2r::ReleaseRequest>(Arena*);
template<> ::p2r::Response* Arena::CreateMaybeMessage<::p2r::Response>(Arena*);
template<> ::p2r::RestoreWarning* Arena::CreateMaybeMessage<::p2r::RestoreWarning>(Arena*);
template<> ::p2r::SetupRequest* Arena::CreateMaybeMessage<::p2r::SetupRequest>(Arena*);
template<> ::p2r::TerminateCancel* Arena::CreateMaybeMessage<::p2r::TerminateCancel>(Arena*);
template<> ::p2r::TerminateWarning* Arena::CreateMaybeMessage<::p2r::TerminateWarning>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace p2r {

enum Cause : int {
  UNDEFINED = 0,
  SUCCESS = 1,
  TIMEOUT = 2,
  ERROR = 3,
  NO_RESOURCES = 4,
  Cause_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Cause_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Cause_IsValid(int value);
constexpr Cause Cause_MIN = UNDEFINED;
constexpr Cause Cause_MAX = NO_RESOURCES;
constexpr int Cause_ARRAYSIZE = Cause_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cause_descriptor();
template<typename T>
inline const std::string& Cause_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cause>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cause_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cause_descriptor(), enum_t_value);
}
inline bool Cause_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cause* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cause>(
    Cause_descriptor(), name, value);
}
enum TerminateReason : int {
  UNKNOWN = 0,
  PLANNED = 1,
  UNPLANNED = 2,
  TerminateReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TerminateReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TerminateReason_IsValid(int value);
constexpr TerminateReason TerminateReason_MIN = UNKNOWN;
constexpr TerminateReason TerminateReason_MAX = UNPLANNED;
constexpr int TerminateReason_ARRAYSIZE = TerminateReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminateReason_descriptor();
template<typename T>
inline const std::string& TerminateReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TerminateReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TerminateReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TerminateReason_descriptor(), enum_t_value);
}
inline bool TerminateReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TerminateReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TerminateReason>(
    TerminateReason_descriptor(), name, value);
}
// ===================================================================

class ConnectionId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.ConnectionId) */ {
 public:
  inline ConnectionId() : ConnectionId(nullptr) {}
  ~ConnectionId() override;
  explicit PROTOBUF_CONSTEXPR ConnectionId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionId(const ConnectionId& from);
  ConnectionId(ConnectionId&& from) noexcept
    : ConnectionId() {
    *this = ::std::move(from);
  }

  inline ConnectionId& operator=(const ConnectionId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionId& operator=(ConnectionId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionId* internal_default_instance() {
    return reinterpret_cast<const ConnectionId*>(
               &_ConnectionId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionId& a, ConnectionId& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionId& from) {
    ConnectionId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.ConnectionId";
  }
  protected:
  explicit ConnectionId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpIdFieldNumber = 1,
    kRmIdFieldNumber = 2,
  };
  // int32 fp_id = 1;
  void clear_fp_id();
  int32_t fp_id() const;
  void set_fp_id(int32_t value);
  private:
  int32_t _internal_fp_id() const;
  void _internal_set_fp_id(int32_t value);
  public:

  // int32 rm_id = 2;
  void clear_rm_id();
  int32_t rm_id() const;
  void set_rm_id(int32_t value);
  private:
  int32_t _internal_rm_id() const;
  void _internal_set_rm_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:p2r.ConnectionId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t fp_id_;
    int32_t rm_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 2,
    kCauseFieldNumber = 1,
  };
  // optional .p2r.ConnectionId connection_id = 2;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::p2r::ConnectionId& connection_id() const;
  PROTOBUF_NODISCARD ::p2r::ConnectionId* release_connection_id();
  ::p2r::ConnectionId* mutable_connection_id();
  void set_allocated_connection_id(::p2r::ConnectionId* connection_id);
  private:
  const ::p2r::ConnectionId& _internal_connection_id() const;
  ::p2r::ConnectionId* _internal_mutable_connection_id();
  public:
  void unsafe_arena_set_allocated_connection_id(
      ::p2r::ConnectionId* connection_id);
  ::p2r::ConnectionId* unsafe_arena_release_connection_id();

  // .p2r.Cause cause = 1;
  void clear_cause();
  ::p2r::Cause cause() const;
  void set_cause(::p2r::Cause value);
  private:
  ::p2r::Cause _internal_cause() const;
  void _internal_set_cause(::p2r::Cause value);
  public:

  // @@protoc_insertion_point(class_scope:p2r.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::p2r::ConnectionId* connection_id_;
    int cause_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// -------------------------------------------------------------------

class SetupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.SetupRequest) */ {
 public:
  inline SetupRequest() : SetupRequest(nullptr) {}
  ~SetupRequest() override;
  explicit PROTOBUF_CONSTEXPR SetupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupRequest(const SetupRequest& from);
  SetupRequest(SetupRequest&& from) noexcept
    : SetupRequest() {
    *this = ::std::move(from);
  }

  inline SetupRequest& operator=(const SetupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequest& operator=(SetupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupRequest* internal_default_instance() {
    return reinterpret_cast<const SetupRequest*>(
               &_SetupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetupRequest& a, SetupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetupRequest& from) {
    SetupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.SetupRequest";
  }
  protected:
  explicit SetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
  };
  // .p2r.ConnectionId connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::p2r::ConnectionId& connection_id() const;
  PROTOBUF_NODISCARD ::p2r::ConnectionId* release_connection_id();
  ::p2r::ConnectionId* mutable_connection_id();
  void set_allocated_connection_id(::p2r::ConnectionId* connection_id);
  private:
  const ::p2r::ConnectionId& _internal_connection_id() const;
  ::p2r::ConnectionId* _internal_mutable_connection_id();
  public:
  void unsafe_arena_set_allocated_connection_id(
      ::p2r::ConnectionId* connection_id);
  ::p2r::ConnectionId* unsafe_arena_release_connection_id();

  // @@protoc_insertion_point(class_scope:p2r.SetupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::p2r::ConnectionId* connection_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// -------------------------------------------------------------------

class ReleaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.ReleaseRequest) */ {
 public:
  inline ReleaseRequest() : ReleaseRequest(nullptr) {}
  ~ReleaseRequest() override;
  explicit PROTOBUF_CONSTEXPR ReleaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseRequest(const ReleaseRequest& from);
  ReleaseRequest(ReleaseRequest&& from) noexcept
    : ReleaseRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseRequest& operator=(const ReleaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseRequest& operator=(ReleaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseRequest*>(
               &_ReleaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReleaseRequest& a, ReleaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleaseRequest& from) {
    ReleaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.ReleaseRequest";
  }
  protected:
  explicit ReleaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kConnectionIdFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .p2r.ConnectionId connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::p2r::ConnectionId& connection_id() const;
  PROTOBUF_NODISCARD ::p2r::ConnectionId* release_connection_id();
  ::p2r::ConnectionId* mutable_connection_id();
  void set_allocated_connection_id(::p2r::ConnectionId* connection_id);
  private:
  const ::p2r::ConnectionId& _internal_connection_id() const;
  ::p2r::ConnectionId* _internal_mutable_connection_id();
  public:
  void unsafe_arena_set_allocated_connection_id(
      ::p2r::ConnectionId* connection_id);
  ::p2r::ConnectionId* unsafe_arena_release_connection_id();

  // @@protoc_insertion_point(class_scope:p2r.ReleaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::p2r::ConnectionId* connection_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// -------------------------------------------------------------------

class TerminateWarning final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.TerminateWarning) */ {
 public:
  inline TerminateWarning() : TerminateWarning(nullptr) {}
  ~TerminateWarning() override;
  explicit PROTOBUF_CONSTEXPR TerminateWarning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminateWarning(const TerminateWarning& from);
  TerminateWarning(TerminateWarning&& from) noexcept
    : TerminateWarning() {
    *this = ::std::move(from);
  }

  inline TerminateWarning& operator=(const TerminateWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateWarning& operator=(TerminateWarning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminateWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminateWarning* internal_default_instance() {
    return reinterpret_cast<const TerminateWarning*>(
               &_TerminateWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TerminateWarning& a, TerminateWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateWarning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminateWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminateWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminateWarning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminateWarning& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TerminateWarning& from) {
    TerminateWarning::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminateWarning* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.TerminateWarning";
  }
  protected:
  explicit TerminateWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kReasonFieldNumber = 2,
    kWarningIdFieldNumber = 3,
    kTimeoutFieldNumber = 4,
  };
  // .p2r.ConnectionId connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::p2r::ConnectionId& connection_id() const;
  PROTOBUF_NODISCARD ::p2r::ConnectionId* release_connection_id();
  ::p2r::ConnectionId* mutable_connection_id();
  void set_allocated_connection_id(::p2r::ConnectionId* connection_id);
  private:
  const ::p2r::ConnectionId& _internal_connection_id() const;
  ::p2r::ConnectionId* _internal_mutable_connection_id();
  public:
  void unsafe_arena_set_allocated_connection_id(
      ::p2r::ConnectionId* connection_id);
  ::p2r::ConnectionId* unsafe_arena_release_connection_id();

  // .p2r.TerminateReason reason = 2;
  void clear_reason();
  ::p2r::TerminateReason reason() const;
  void set_reason(::p2r::TerminateReason value);
  private:
  ::p2r::TerminateReason _internal_reason() const;
  void _internal_set_reason(::p2r::TerminateReason value);
  public:

  // int32 warning_id = 3;
  void clear_warning_id();
  int32_t warning_id() const;
  void set_warning_id(int32_t value);
  private:
  int32_t _internal_warning_id() const;
  void _internal_set_warning_id(int32_t value);
  public:

  // int32 timeout = 4;
  void clear_timeout();
  int32_t timeout() const;
  void set_timeout(int32_t value);
  private:
  int32_t _internal_timeout() const;
  void _internal_set_timeout(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:p2r.TerminateWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::p2r::ConnectionId* connection_id_;
    int reason_;
    int32_t warning_id_;
    int32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// -------------------------------------------------------------------

class TerminateCancel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.TerminateCancel) */ {
 public:
  inline TerminateCancel() : TerminateCancel(nullptr) {}
  ~TerminateCancel() override;
  explicit PROTOBUF_CONSTEXPR TerminateCancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TerminateCancel(const TerminateCancel& from);
  TerminateCancel(TerminateCancel&& from) noexcept
    : TerminateCancel() {
    *this = ::std::move(from);
  }

  inline TerminateCancel& operator=(const TerminateCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateCancel& operator=(TerminateCancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TerminateCancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const TerminateCancel* internal_default_instance() {
    return reinterpret_cast<const TerminateCancel*>(
               &_TerminateCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TerminateCancel& a, TerminateCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateCancel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminateCancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TerminateCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TerminateCancel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TerminateCancel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TerminateCancel& from) {
    TerminateCancel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminateCancel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.TerminateCancel";
  }
  protected:
  explicit TerminateCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kWarningIdFieldNumber = 2,
  };
  // .p2r.ConnectionId connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::p2r::ConnectionId& connection_id() const;
  PROTOBUF_NODISCARD ::p2r::ConnectionId* release_connection_id();
  ::p2r::ConnectionId* mutable_connection_id();
  void set_allocated_connection_id(::p2r::ConnectionId* connection_id);
  private:
  const ::p2r::ConnectionId& _internal_connection_id() const;
  ::p2r::ConnectionId* _internal_mutable_connection_id();
  public:
  void unsafe_arena_set_allocated_connection_id(
      ::p2r::ConnectionId* connection_id);
  ::p2r::ConnectionId* unsafe_arena_release_connection_id();

  // int32 warning_id = 2;
  void clear_warning_id();
  int32_t warning_id() const;
  void set_warning_id(int32_t value);
  private:
  int32_t _internal_warning_id() const;
  void _internal_set_warning_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:p2r.TerminateCancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::p2r::ConnectionId* connection_id_;
    int32_t warning_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// -------------------------------------------------------------------

class RestoreWarning final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:p2r.RestoreWarning) */ {
 public:
  inline RestoreWarning() : RestoreWarning(nullptr) {}
  ~RestoreWarning() override;
  explicit PROTOBUF_CONSTEXPR RestoreWarning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreWarning(const RestoreWarning& from);
  RestoreWarning(RestoreWarning&& from) noexcept
    : RestoreWarning() {
    *this = ::std::move(from);
  }

  inline RestoreWarning& operator=(const RestoreWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreWarning& operator=(RestoreWarning&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestoreWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestoreWarning* internal_default_instance() {
    return reinterpret_cast<const RestoreWarning*>(
               &_RestoreWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RestoreWarning& a, RestoreWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreWarning* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestoreWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestoreWarning>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestoreWarning& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RestoreWarning& from) {
    RestoreWarning::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreWarning* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "p2r.RestoreWarning";
  }
  protected:
  explicit RestoreWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // .p2r.ConnectionId connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::p2r::ConnectionId& connection_id() const;
  PROTOBUF_NODISCARD ::p2r::ConnectionId* release_connection_id();
  ::p2r::ConnectionId* mutable_connection_id();
  void set_allocated_connection_id(::p2r::ConnectionId* connection_id);
  private:
  const ::p2r::ConnectionId& _internal_connection_id() const;
  ::p2r::ConnectionId* _internal_mutable_connection_id();
  public:
  void unsafe_arena_set_allocated_connection_id(
      ::p2r::ConnectionId* connection_id);
  ::p2r::ConnectionId* unsafe_arena_release_connection_id();

  // int32 timeout = 2;
  void clear_timeout();
  int32_t timeout() const;
  void set_timeout(int32_t value);
  private:
  int32_t _internal_timeout() const;
  void _internal_set_timeout(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:p2r.RestoreWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::p2r::ConnectionId* connection_id_;
    int32_t timeout_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_P2r_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionId

// int32 fp_id = 1;
inline void ConnectionId::clear_fp_id() {
  _impl_.fp_id_ = 0;
}
inline int32_t ConnectionId::_internal_fp_id() const {
  return _impl_.fp_id_;
}
inline int32_t ConnectionId::fp_id() const {
  // @@protoc_insertion_point(field_get:p2r.ConnectionId.fp_id)
  return _internal_fp_id();
}
inline void ConnectionId::_internal_set_fp_id(int32_t value) {
  
  _impl_.fp_id_ = value;
}
inline void ConnectionId::set_fp_id(int32_t value) {
  _internal_set_fp_id(value);
  // @@protoc_insertion_point(field_set:p2r.ConnectionId.fp_id)
}

// int32 rm_id = 2;
inline void ConnectionId::clear_rm_id() {
  _impl_.rm_id_ = 0;
}
inline int32_t ConnectionId::_internal_rm_id() const {
  return _impl_.rm_id_;
}
inline int32_t ConnectionId::rm_id() const {
  // @@protoc_insertion_point(field_get:p2r.ConnectionId.rm_id)
  return _internal_rm_id();
}
inline void ConnectionId::_internal_set_rm_id(int32_t value) {
  
  _impl_.rm_id_ = value;
}
inline void ConnectionId::set_rm_id(int32_t value) {
  _internal_set_rm_id(value);
  // @@protoc_insertion_point(field_set:p2r.ConnectionId.rm_id)
}

// -------------------------------------------------------------------

// Response

// .p2r.Cause cause = 1;
inline void Response::clear_cause() {
  _impl_.cause_ = 0;
}
inline ::p2r::Cause Response::_internal_cause() const {
  return static_cast< ::p2r::Cause >(_impl_.cause_);
}
inline ::p2r::Cause Response::cause() const {
  // @@protoc_insertion_point(field_get:p2r.Response.cause)
  return _internal_cause();
}
inline void Response::_internal_set_cause(::p2r::Cause value) {
  
  _impl_.cause_ = value;
}
inline void Response::set_cause(::p2r::Cause value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:p2r.Response.cause)
}

// optional .p2r.ConnectionId connection_id = 2;
inline bool Response::_internal_has_connection_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connection_id_ != nullptr);
  return value;
}
inline bool Response::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void Response::clear_connection_id() {
  if (_impl_.connection_id_ != nullptr) _impl_.connection_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::p2r::ConnectionId& Response::_internal_connection_id() const {
  const ::p2r::ConnectionId* p = _impl_.connection_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::p2r::ConnectionId&>(
      ::p2r::_ConnectionId_default_instance_);
}
inline const ::p2r::ConnectionId& Response::connection_id() const {
  // @@protoc_insertion_point(field_get:p2r.Response.connection_id)
  return _internal_connection_id();
}
inline void Response::unsafe_arena_set_allocated_connection_id(
    ::p2r::ConnectionId* connection_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_id_);
  }
  _impl_.connection_id_ = connection_id;
  if (connection_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p2r.Response.connection_id)
}
inline ::p2r::ConnectionId* Response::release_connection_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p2r::ConnectionId* Response::unsafe_arena_release_connection_id() {
  // @@protoc_insertion_point(field_release:p2r.Response.connection_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
  return temp;
}
inline ::p2r::ConnectionId* Response::_internal_mutable_connection_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::p2r::ConnectionId>(GetArenaForAllocation());
    _impl_.connection_id_ = p;
  }
  return _impl_.connection_id_;
}
inline ::p2r::ConnectionId* Response::mutable_connection_id() {
  ::p2r::ConnectionId* _msg = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:p2r.Response.connection_id)
  return _msg;
}
inline void Response::set_allocated_connection_id(::p2r::ConnectionId* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_id);
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:p2r.Response.connection_id)
}

// -------------------------------------------------------------------

// SetupRequest

// .p2r.ConnectionId connection_id = 1;
inline bool SetupRequest::_internal_has_connection_id() const {
  return this != internal_default_instance() && _impl_.connection_id_ != nullptr;
}
inline bool SetupRequest::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void SetupRequest::clear_connection_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
}
inline const ::p2r::ConnectionId& SetupRequest::_internal_connection_id() const {
  const ::p2r::ConnectionId* p = _impl_.connection_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::p2r::ConnectionId&>(
      ::p2r::_ConnectionId_default_instance_);
}
inline const ::p2r::ConnectionId& SetupRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:p2r.SetupRequest.connection_id)
  return _internal_connection_id();
}
inline void SetupRequest::unsafe_arena_set_allocated_connection_id(
    ::p2r::ConnectionId* connection_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_id_);
  }
  _impl_.connection_id_ = connection_id;
  if (connection_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p2r.SetupRequest.connection_id)
}
inline ::p2r::ConnectionId* SetupRequest::release_connection_id() {
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p2r::ConnectionId* SetupRequest::unsafe_arena_release_connection_id() {
  // @@protoc_insertion_point(field_release:p2r.SetupRequest.connection_id)
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
  return temp;
}
inline ::p2r::ConnectionId* SetupRequest::_internal_mutable_connection_id() {
  
  if (_impl_.connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::p2r::ConnectionId>(GetArenaForAllocation());
    _impl_.connection_id_ = p;
  }
  return _impl_.connection_id_;
}
inline ::p2r::ConnectionId* SetupRequest::mutable_connection_id() {
  ::p2r::ConnectionId* _msg = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:p2r.SetupRequest.connection_id)
  return _msg;
}
inline void SetupRequest::set_allocated_connection_id(::p2r::ConnectionId* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_id);
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:p2r.SetupRequest.connection_id)
}

// -------------------------------------------------------------------

// ReleaseRequest

// .p2r.ConnectionId connection_id = 1;
inline bool ReleaseRequest::_internal_has_connection_id() const {
  return this != internal_default_instance() && _impl_.connection_id_ != nullptr;
}
inline bool ReleaseRequest::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void ReleaseRequest::clear_connection_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
}
inline const ::p2r::ConnectionId& ReleaseRequest::_internal_connection_id() const {
  const ::p2r::ConnectionId* p = _impl_.connection_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::p2r::ConnectionId&>(
      ::p2r::_ConnectionId_default_instance_);
}
inline const ::p2r::ConnectionId& ReleaseRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:p2r.ReleaseRequest.connection_id)
  return _internal_connection_id();
}
inline void ReleaseRequest::unsafe_arena_set_allocated_connection_id(
    ::p2r::ConnectionId* connection_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_id_);
  }
  _impl_.connection_id_ = connection_id;
  if (connection_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p2r.ReleaseRequest.connection_id)
}
inline ::p2r::ConnectionId* ReleaseRequest::release_connection_id() {
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p2r::ConnectionId* ReleaseRequest::unsafe_arena_release_connection_id() {
  // @@protoc_insertion_point(field_release:p2r.ReleaseRequest.connection_id)
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
  return temp;
}
inline ::p2r::ConnectionId* ReleaseRequest::_internal_mutable_connection_id() {
  
  if (_impl_.connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::p2r::ConnectionId>(GetArenaForAllocation());
    _impl_.connection_id_ = p;
  }
  return _impl_.connection_id_;
}
inline ::p2r::ConnectionId* ReleaseRequest::mutable_connection_id() {
  ::p2r::ConnectionId* _msg = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:p2r.ReleaseRequest.connection_id)
  return _msg;
}
inline void ReleaseRequest::set_allocated_connection_id(::p2r::ConnectionId* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_id);
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:p2r.ReleaseRequest.connection_id)
}

// optional string reason = 2;
inline bool ReleaseRequest::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseRequest::has_reason() const {
  return _internal_has_reason();
}
inline void ReleaseRequest::clear_reason() {
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseRequest::reason() const {
  // @@protoc_insertion_point(field_get:p2r.ReleaseRequest.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleaseRequest::set_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:p2r.ReleaseRequest.reason)
}
inline std::string* ReleaseRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:p2r.ReleaseRequest.reason)
  return _s;
}
inline const std::string& ReleaseRequest::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void ReleaseRequest::_internal_set_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleaseRequest::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleaseRequest::release_reason() {
  // @@protoc_insertion_point(field_release:p2r.ReleaseRequest.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReleaseRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:p2r.ReleaseRequest.reason)
}

// -------------------------------------------------------------------

// TerminateWarning

// .p2r.ConnectionId connection_id = 1;
inline bool TerminateWarning::_internal_has_connection_id() const {
  return this != internal_default_instance() && _impl_.connection_id_ != nullptr;
}
inline bool TerminateWarning::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void TerminateWarning::clear_connection_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
}
inline const ::p2r::ConnectionId& TerminateWarning::_internal_connection_id() const {
  const ::p2r::ConnectionId* p = _impl_.connection_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::p2r::ConnectionId&>(
      ::p2r::_ConnectionId_default_instance_);
}
inline const ::p2r::ConnectionId& TerminateWarning::connection_id() const {
  // @@protoc_insertion_point(field_get:p2r.TerminateWarning.connection_id)
  return _internal_connection_id();
}
inline void TerminateWarning::unsafe_arena_set_allocated_connection_id(
    ::p2r::ConnectionId* connection_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_id_);
  }
  _impl_.connection_id_ = connection_id;
  if (connection_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p2r.TerminateWarning.connection_id)
}
inline ::p2r::ConnectionId* TerminateWarning::release_connection_id() {
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p2r::ConnectionId* TerminateWarning::unsafe_arena_release_connection_id() {
  // @@protoc_insertion_point(field_release:p2r.TerminateWarning.connection_id)
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
  return temp;
}
inline ::p2r::ConnectionId* TerminateWarning::_internal_mutable_connection_id() {
  
  if (_impl_.connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::p2r::ConnectionId>(GetArenaForAllocation());
    _impl_.connection_id_ = p;
  }
  return _impl_.connection_id_;
}
inline ::p2r::ConnectionId* TerminateWarning::mutable_connection_id() {
  ::p2r::ConnectionId* _msg = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:p2r.TerminateWarning.connection_id)
  return _msg;
}
inline void TerminateWarning::set_allocated_connection_id(::p2r::ConnectionId* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_id);
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:p2r.TerminateWarning.connection_id)
}

// .p2r.TerminateReason reason = 2;
inline void TerminateWarning::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::p2r::TerminateReason TerminateWarning::_internal_reason() const {
  return static_cast< ::p2r::TerminateReason >(_impl_.reason_);
}
inline ::p2r::TerminateReason TerminateWarning::reason() const {
  // @@protoc_insertion_point(field_get:p2r.TerminateWarning.reason)
  return _internal_reason();
}
inline void TerminateWarning::_internal_set_reason(::p2r::TerminateReason value) {
  
  _impl_.reason_ = value;
}
inline void TerminateWarning::set_reason(::p2r::TerminateReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:p2r.TerminateWarning.reason)
}

// int32 warning_id = 3;
inline void TerminateWarning::clear_warning_id() {
  _impl_.warning_id_ = 0;
}
inline int32_t TerminateWarning::_internal_warning_id() const {
  return _impl_.warning_id_;
}
inline int32_t TerminateWarning::warning_id() const {
  // @@protoc_insertion_point(field_get:p2r.TerminateWarning.warning_id)
  return _internal_warning_id();
}
inline void TerminateWarning::_internal_set_warning_id(int32_t value) {
  
  _impl_.warning_id_ = value;
}
inline void TerminateWarning::set_warning_id(int32_t value) {
  _internal_set_warning_id(value);
  // @@protoc_insertion_point(field_set:p2r.TerminateWarning.warning_id)
}

// int32 timeout = 4;
inline void TerminateWarning::clear_timeout() {
  _impl_.timeout_ = 0;
}
inline int32_t TerminateWarning::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int32_t TerminateWarning::timeout() const {
  // @@protoc_insertion_point(field_get:p2r.TerminateWarning.timeout)
  return _internal_timeout();
}
inline void TerminateWarning::_internal_set_timeout(int32_t value) {
  
  _impl_.timeout_ = value;
}
inline void TerminateWarning::set_timeout(int32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:p2r.TerminateWarning.timeout)
}

// -------------------------------------------------------------------

// TerminateCancel

// .p2r.ConnectionId connection_id = 1;
inline bool TerminateCancel::_internal_has_connection_id() const {
  return this != internal_default_instance() && _impl_.connection_id_ != nullptr;
}
inline bool TerminateCancel::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void TerminateCancel::clear_connection_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
}
inline const ::p2r::ConnectionId& TerminateCancel::_internal_connection_id() const {
  const ::p2r::ConnectionId* p = _impl_.connection_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::p2r::ConnectionId&>(
      ::p2r::_ConnectionId_default_instance_);
}
inline const ::p2r::ConnectionId& TerminateCancel::connection_id() const {
  // @@protoc_insertion_point(field_get:p2r.TerminateCancel.connection_id)
  return _internal_connection_id();
}
inline void TerminateCancel::unsafe_arena_set_allocated_connection_id(
    ::p2r::ConnectionId* connection_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_id_);
  }
  _impl_.connection_id_ = connection_id;
  if (connection_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p2r.TerminateCancel.connection_id)
}
inline ::p2r::ConnectionId* TerminateCancel::release_connection_id() {
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p2r::ConnectionId* TerminateCancel::unsafe_arena_release_connection_id() {
  // @@protoc_insertion_point(field_release:p2r.TerminateCancel.connection_id)
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
  return temp;
}
inline ::p2r::ConnectionId* TerminateCancel::_internal_mutable_connection_id() {
  
  if (_impl_.connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::p2r::ConnectionId>(GetArenaForAllocation());
    _impl_.connection_id_ = p;
  }
  return _impl_.connection_id_;
}
inline ::p2r::ConnectionId* TerminateCancel::mutable_connection_id() {
  ::p2r::ConnectionId* _msg = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:p2r.TerminateCancel.connection_id)
  return _msg;
}
inline void TerminateCancel::set_allocated_connection_id(::p2r::ConnectionId* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_id);
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:p2r.TerminateCancel.connection_id)
}

// int32 warning_id = 2;
inline void TerminateCancel::clear_warning_id() {
  _impl_.warning_id_ = 0;
}
inline int32_t TerminateCancel::_internal_warning_id() const {
  return _impl_.warning_id_;
}
inline int32_t TerminateCancel::warning_id() const {
  // @@protoc_insertion_point(field_get:p2r.TerminateCancel.warning_id)
  return _internal_warning_id();
}
inline void TerminateCancel::_internal_set_warning_id(int32_t value) {
  
  _impl_.warning_id_ = value;
}
inline void TerminateCancel::set_warning_id(int32_t value) {
  _internal_set_warning_id(value);
  // @@protoc_insertion_point(field_set:p2r.TerminateCancel.warning_id)
}

// -------------------------------------------------------------------

// RestoreWarning

// .p2r.ConnectionId connection_id = 1;
inline bool RestoreWarning::_internal_has_connection_id() const {
  return this != internal_default_instance() && _impl_.connection_id_ != nullptr;
}
inline bool RestoreWarning::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void RestoreWarning::clear_connection_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
}
inline const ::p2r::ConnectionId& RestoreWarning::_internal_connection_id() const {
  const ::p2r::ConnectionId* p = _impl_.connection_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::p2r::ConnectionId&>(
      ::p2r::_ConnectionId_default_instance_);
}
inline const ::p2r::ConnectionId& RestoreWarning::connection_id() const {
  // @@protoc_insertion_point(field_get:p2r.RestoreWarning.connection_id)
  return _internal_connection_id();
}
inline void RestoreWarning::unsafe_arena_set_allocated_connection_id(
    ::p2r::ConnectionId* connection_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connection_id_);
  }
  _impl_.connection_id_ = connection_id;
  if (connection_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:p2r.RestoreWarning.connection_id)
}
inline ::p2r::ConnectionId* RestoreWarning::release_connection_id() {
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::p2r::ConnectionId* RestoreWarning::unsafe_arena_release_connection_id() {
  // @@protoc_insertion_point(field_release:p2r.RestoreWarning.connection_id)
  
  ::p2r::ConnectionId* temp = _impl_.connection_id_;
  _impl_.connection_id_ = nullptr;
  return temp;
}
inline ::p2r::ConnectionId* RestoreWarning::_internal_mutable_connection_id() {
  
  if (_impl_.connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::p2r::ConnectionId>(GetArenaForAllocation());
    _impl_.connection_id_ = p;
  }
  return _impl_.connection_id_;
}
inline ::p2r::ConnectionId* RestoreWarning::mutable_connection_id() {
  ::p2r::ConnectionId* _msg = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:p2r.RestoreWarning.connection_id)
  return _msg;
}
inline void RestoreWarning::set_allocated_connection_id(::p2r::ConnectionId* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connection_id);
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:p2r.RestoreWarning.connection_id)
}

// int32 timeout = 2;
inline void RestoreWarning::clear_timeout() {
  _impl_.timeout_ = 0;
}
inline int32_t RestoreWarning::_internal_timeout() const {
  return _impl_.timeout_;
}
inline int32_t RestoreWarning::timeout() const {
  // @@protoc_insertion_point(field_get:p2r.RestoreWarning.timeout)
  return _internal_timeout();
}
inline void RestoreWarning::_internal_set_timeout(int32_t value) {
  
  _impl_.timeout_ = value;
}
inline void RestoreWarning::set_timeout(int32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:p2r.RestoreWarning.timeout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2r

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::p2r::Cause> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2r::Cause>() {
  return ::p2r::Cause_descriptor();
}
template <> struct is_proto_enum< ::p2r::TerminateReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2r::TerminateReason>() {
  return ::p2r::TerminateReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_P2r_2eproto
