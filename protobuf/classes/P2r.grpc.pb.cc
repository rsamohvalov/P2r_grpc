// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: P2r.proto

#include "P2r.pb.h"
#include "P2r.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace p2r {

static const char* P2R_method_names[] = {
  "/p2r.P2R/P2rSetupConnection",
  "/p2r.P2R/P2rReleaseConnection",
  "/p2r.P2R/P2rTerminateWarning",
  "/p2r.P2R/P2rTerminateWarningCancel",
  "/p2r.P2R/P2rRestoreWarning",
};

std::unique_ptr< P2R::Stub> P2R::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< P2R::Stub> stub(new P2R::Stub(channel, options));
  return stub;
}

P2R::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_P2rSetupConnection_(P2R_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_P2rReleaseConnection_(P2R_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_P2rTerminateWarning_(P2R_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_P2rTerminateWarningCancel_(P2R_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_P2rRestoreWarning_(P2R_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status P2R::Stub::P2rSetupConnection(::grpc::ClientContext* context, const ::p2r::SetupRequest& request, ::p2r::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::p2r::SetupRequest, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_P2rSetupConnection_, context, request, response);
}

void P2R::Stub::async::P2rSetupConnection(::grpc::ClientContext* context, const ::p2r::SetupRequest* request, ::p2r::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::p2r::SetupRequest, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rSetupConnection_, context, request, response, std::move(f));
}

void P2R::Stub::async::P2rSetupConnection(::grpc::ClientContext* context, const ::p2r::SetupRequest* request, ::p2r::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rSetupConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::PrepareAsyncP2rSetupConnectionRaw(::grpc::ClientContext* context, const ::p2r::SetupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::p2r::Response, ::p2r::SetupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_P2rSetupConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::AsyncP2rSetupConnectionRaw(::grpc::ClientContext* context, const ::p2r::SetupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncP2rSetupConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status P2R::Stub::P2rReleaseConnection(::grpc::ClientContext* context, const ::p2r::ReleaseRequest& request, ::p2r::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::p2r::ReleaseRequest, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_P2rReleaseConnection_, context, request, response);
}

void P2R::Stub::async::P2rReleaseConnection(::grpc::ClientContext* context, const ::p2r::ReleaseRequest* request, ::p2r::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::p2r::ReleaseRequest, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rReleaseConnection_, context, request, response, std::move(f));
}

void P2R::Stub::async::P2rReleaseConnection(::grpc::ClientContext* context, const ::p2r::ReleaseRequest* request, ::p2r::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rReleaseConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::PrepareAsyncP2rReleaseConnectionRaw(::grpc::ClientContext* context, const ::p2r::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::p2r::Response, ::p2r::ReleaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_P2rReleaseConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::AsyncP2rReleaseConnectionRaw(::grpc::ClientContext* context, const ::p2r::ReleaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncP2rReleaseConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status P2R::Stub::P2rTerminateWarning(::grpc::ClientContext* context, const ::p2r::TerminateWarning& request, ::p2r::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::p2r::TerminateWarning, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_P2rTerminateWarning_, context, request, response);
}

void P2R::Stub::async::P2rTerminateWarning(::grpc::ClientContext* context, const ::p2r::TerminateWarning* request, ::p2r::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::p2r::TerminateWarning, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rTerminateWarning_, context, request, response, std::move(f));
}

void P2R::Stub::async::P2rTerminateWarning(::grpc::ClientContext* context, const ::p2r::TerminateWarning* request, ::p2r::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rTerminateWarning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::PrepareAsyncP2rTerminateWarningRaw(::grpc::ClientContext* context, const ::p2r::TerminateWarning& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::p2r::Response, ::p2r::TerminateWarning, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_P2rTerminateWarning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::AsyncP2rTerminateWarningRaw(::grpc::ClientContext* context, const ::p2r::TerminateWarning& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncP2rTerminateWarningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status P2R::Stub::P2rTerminateWarningCancel(::grpc::ClientContext* context, const ::p2r::TerminateCancel& request, ::p2r::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::p2r::TerminateCancel, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_P2rTerminateWarningCancel_, context, request, response);
}

void P2R::Stub::async::P2rTerminateWarningCancel(::grpc::ClientContext* context, const ::p2r::TerminateCancel* request, ::p2r::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::p2r::TerminateCancel, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rTerminateWarningCancel_, context, request, response, std::move(f));
}

void P2R::Stub::async::P2rTerminateWarningCancel(::grpc::ClientContext* context, const ::p2r::TerminateCancel* request, ::p2r::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rTerminateWarningCancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::PrepareAsyncP2rTerminateWarningCancelRaw(::grpc::ClientContext* context, const ::p2r::TerminateCancel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::p2r::Response, ::p2r::TerminateCancel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_P2rTerminateWarningCancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::AsyncP2rTerminateWarningCancelRaw(::grpc::ClientContext* context, const ::p2r::TerminateCancel& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncP2rTerminateWarningCancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status P2R::Stub::P2rRestoreWarning(::grpc::ClientContext* context, const ::p2r::RestoreWarning& request, ::p2r::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::p2r::RestoreWarning, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_P2rRestoreWarning_, context, request, response);
}

void P2R::Stub::async::P2rRestoreWarning(::grpc::ClientContext* context, const ::p2r::RestoreWarning* request, ::p2r::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::p2r::RestoreWarning, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rRestoreWarning_, context, request, response, std::move(f));
}

void P2R::Stub::async::P2rRestoreWarning(::grpc::ClientContext* context, const ::p2r::RestoreWarning* request, ::p2r::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_P2rRestoreWarning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::PrepareAsyncP2rRestoreWarningRaw(::grpc::ClientContext* context, const ::p2r::RestoreWarning& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::p2r::Response, ::p2r::RestoreWarning, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_P2rRestoreWarning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::p2r::Response>* P2R::Stub::AsyncP2rRestoreWarningRaw(::grpc::ClientContext* context, const ::p2r::RestoreWarning& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncP2rRestoreWarningRaw(context, request, cq);
  result->StartCall();
  return result;
}

P2R::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      P2R_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< P2R::Service, ::p2r::SetupRequest, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](P2R::Service* service,
             ::grpc::ServerContext* ctx,
             const ::p2r::SetupRequest* req,
             ::p2r::Response* resp) {
               return service->P2rSetupConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      P2R_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< P2R::Service, ::p2r::ReleaseRequest, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](P2R::Service* service,
             ::grpc::ServerContext* ctx,
             const ::p2r::ReleaseRequest* req,
             ::p2r::Response* resp) {
               return service->P2rReleaseConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      P2R_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< P2R::Service, ::p2r::TerminateWarning, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](P2R::Service* service,
             ::grpc::ServerContext* ctx,
             const ::p2r::TerminateWarning* req,
             ::p2r::Response* resp) {
               return service->P2rTerminateWarning(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      P2R_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< P2R::Service, ::p2r::TerminateCancel, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](P2R::Service* service,
             ::grpc::ServerContext* ctx,
             const ::p2r::TerminateCancel* req,
             ::p2r::Response* resp) {
               return service->P2rTerminateWarningCancel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      P2R_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< P2R::Service, ::p2r::RestoreWarning, ::p2r::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](P2R::Service* service,
             ::grpc::ServerContext* ctx,
             const ::p2r::RestoreWarning* req,
             ::p2r::Response* resp) {
               return service->P2rRestoreWarning(ctx, req, resp);
             }, this)));
}

P2R::Service::~Service() {
}

::grpc::Status P2R::Service::P2rSetupConnection(::grpc::ServerContext* context, const ::p2r::SetupRequest* request, ::p2r::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status P2R::Service::P2rReleaseConnection(::grpc::ServerContext* context, const ::p2r::ReleaseRequest* request, ::p2r::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status P2R::Service::P2rTerminateWarning(::grpc::ServerContext* context, const ::p2r::TerminateWarning* request, ::p2r::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status P2R::Service::P2rTerminateWarningCancel(::grpc::ServerContext* context, const ::p2r::TerminateCancel* request, ::p2r::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status P2R::Service::P2rRestoreWarning(::grpc::ServerContext* context, const ::p2r::RestoreWarning* request, ::p2r::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace p2r

