// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: P2r.proto

#include "P2r.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace p2r {
PROTOBUF_CONSTEXPR ConnectionId::ConnectionId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fp_id_)*/0
  , /*decltype(_impl_.rm_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionIdDefaultTypeInternal() {}
  union {
    ConnectionId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionIdDefaultTypeInternal _ConnectionId_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_id_)*/nullptr
  , /*decltype(_impl_.cause_)*/0} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR SetupRequest::SetupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupRequestDefaultTypeInternal() {}
  union {
    SetupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupRequestDefaultTypeInternal _SetupRequest_default_instance_;
PROTOBUF_CONSTEXPR ReleaseRequest::ReleaseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connection_id_)*/nullptr} {}
struct ReleaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseRequestDefaultTypeInternal() {}
  union {
    ReleaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseRequestDefaultTypeInternal _ReleaseRequest_default_instance_;
PROTOBUF_CONSTEXPR TerminateWarning::TerminateWarning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/nullptr
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.warning_id_)*/0
  , /*decltype(_impl_.timeout_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminateWarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateWarningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateWarningDefaultTypeInternal() {}
  union {
    TerminateWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateWarningDefaultTypeInternal _TerminateWarning_default_instance_;
PROTOBUF_CONSTEXPR TerminateCancel::TerminateCancel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/nullptr
  , /*decltype(_impl_.warning_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TerminateCancelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TerminateCancelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TerminateCancelDefaultTypeInternal() {}
  union {
    TerminateCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TerminateCancelDefaultTypeInternal _TerminateCancel_default_instance_;
PROTOBUF_CONSTEXPR RestoreWarning::RestoreWarning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/nullptr
  , /*decltype(_impl_.timeout_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RestoreWarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RestoreWarningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RestoreWarningDefaultTypeInternal() {}
  union {
    RestoreWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RestoreWarningDefaultTypeInternal _RestoreWarning_default_instance_;
}  // namespace p2r
static ::_pb::Metadata file_level_metadata_P2r_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_P2r_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_P2r_2eproto = nullptr;

const uint32_t TableStruct_P2r_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p2r::ConnectionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::ConnectionId, _impl_.fp_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::ConnectionId, _impl_.rm_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::p2r::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::Response, _impl_.cause_),
  PROTOBUF_FIELD_OFFSET(::p2r::Response, _impl_.connection_id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p2r::SetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::SetupRequest, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::ReleaseRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::p2r::ReleaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::ReleaseRequest, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::ReleaseRequest, _impl_.reason_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateWarning, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateWarning, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateWarning, _impl_.warning_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateWarning, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateCancel, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::TerminateCancel, _impl_.warning_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::p2r::RestoreWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::p2r::RestoreWarning, _impl_.connection_id_),
  PROTOBUF_FIELD_OFFSET(::p2r::RestoreWarning, _impl_.timeout_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::p2r::ConnectionId)},
  { 8, 16, -1, sizeof(::p2r::Response)},
  { 18, -1, -1, sizeof(::p2r::SetupRequest)},
  { 25, 33, -1, sizeof(::p2r::ReleaseRequest)},
  { 35, -1, -1, sizeof(::p2r::TerminateWarning)},
  { 45, -1, -1, sizeof(::p2r::TerminateCancel)},
  { 53, -1, -1, sizeof(::p2r::RestoreWarning)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::p2r::_ConnectionId_default_instance_._instance,
  &::p2r::_Response_default_instance_._instance,
  &::p2r::_SetupRequest_default_instance_._instance,
  &::p2r::_ReleaseRequest_default_instance_._instance,
  &::p2r::_TerminateWarning_default_instance_._instance,
  &::p2r::_TerminateCancel_default_instance_._instance,
  &::p2r::_RestoreWarning_default_instance_._instance,
};

const char descriptor_table_protodef_P2r_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tP2r.proto\022\003p2r\",\n\014ConnectionId\022\r\n\005fp_i"
  "d\030\001 \001(\005\022\r\n\005rm_id\030\002 \001(\005\"f\n\010Response\022\031\n\005ca"
  "use\030\001 \001(\0162\n.p2r.Cause\022-\n\rconnection_id\030\002"
  " \001(\0132\021.p2r.ConnectionIdH\000\210\001\001B\020\n\016_connect"
  "ion_id\"8\n\014SetupRequest\022(\n\rconnection_id\030"
  "\001 \001(\0132\021.p2r.ConnectionId\"Z\n\016ReleaseReque"
  "st\022(\n\rconnection_id\030\001 \001(\0132\021.p2r.Connecti"
  "onId\022\023\n\006reason\030\002 \001(\tH\000\210\001\001B\t\n\007_reason\"\207\001\n"
  "\020TerminateWarning\022(\n\rconnection_id\030\001 \001(\013"
  "2\021.p2r.ConnectionId\022$\n\006reason\030\002 \001(\0162\024.p2"
  "r.TerminateReason\022\022\n\nwarning_id\030\003 \001(\005\022\017\n"
  "\007timeout\030\004 \001(\005\"O\n\017TerminateCancel\022(\n\rcon"
  "nection_id\030\001 \001(\0132\021.p2r.ConnectionId\022\022\n\nw"
  "arning_id\030\002 \001(\005\"K\n\016RestoreWarning\022(\n\rcon"
  "nection_id\030\001 \001(\0132\021.p2r.ConnectionId\022\017\n\007t"
  "imeout\030\002 \001(\005*M\n\005Cause\022\r\n\tUNDEFINED\020\000\022\013\n\007"
  "SUCCESS\020\001\022\013\n\007TIMEOUT\020\002\022\t\n\005ERROR\020\003\022\020\n\014NO_"
  "RESOURCES\020\004*:\n\017TerminateReason\022\013\n\007UNKNOW"
  "N\020\000\022\013\n\007PLANNED\020\001\022\r\n\tUNPLANNED\020\0022\261\002\n\003P2R\022"
  "6\n\022P2rSetupConnection\022\021.p2r.SetupRequest"
  "\032\r.p2r.Response\022:\n\024P2rReleaseConnection\022"
  "\023.p2r.ReleaseRequest\032\r.p2r.Response\022;\n\023P"
  "2rTerminateWarning\022\025.p2r.TerminateWarnin"
  "g\032\r.p2r.Response\022@\n\031P2rTerminateWarningC"
  "ancel\022\024.p2r.TerminateCancel\032\r.p2r.Respon"
  "se\0227\n\021P2rRestoreWarning\022\023.p2r.RestoreWar"
  "ning\032\r.p2r.Responseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_P2r_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_P2r_2eproto = {
    false, false, 1067, descriptor_table_protodef_P2r_2eproto,
    "P2r.proto",
    &descriptor_table_P2r_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_P2r_2eproto::offsets,
    file_level_metadata_P2r_2eproto, file_level_enum_descriptors_P2r_2eproto,
    file_level_service_descriptors_P2r_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_P2r_2eproto_getter() {
  return &descriptor_table_P2r_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_P2r_2eproto(&descriptor_table_P2r_2eproto);
namespace p2r {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_P2r_2eproto);
  return file_level_enum_descriptors_P2r_2eproto[0];
}
bool Cause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TerminateReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_P2r_2eproto);
  return file_level_enum_descriptors_P2r_2eproto[1];
}
bool TerminateReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ConnectionId::_Internal {
 public:
};

ConnectionId::ConnectionId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.ConnectionId)
}
ConnectionId::ConnectionId(const ConnectionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fp_id_){}
    , decltype(_impl_.rm_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fp_id_, &from._impl_.fp_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rm_id_) -
    reinterpret_cast<char*>(&_impl_.fp_id_)) + sizeof(_impl_.rm_id_));
  // @@protoc_insertion_point(copy_constructor:p2r.ConnectionId)
}

inline void ConnectionId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fp_id_){0}
    , decltype(_impl_.rm_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectionId::~ConnectionId() {
  // @@protoc_insertion_point(destructor:p2r.ConnectionId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionId::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.ConnectionId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rm_id_) -
      reinterpret_cast<char*>(&_impl_.fp_id_)) + sizeof(_impl_.rm_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 fp_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rm_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rm_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.ConnectionId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fp_id = 1;
  if (this->_internal_fp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fp_id(), target);
  }

  // int32 rm_id = 2;
  if (this->_internal_rm_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rm_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.ConnectionId)
  return target;
}

size_t ConnectionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.ConnectionId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fp_id = 1;
  if (this->_internal_fp_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fp_id());
  }

  // int32 rm_id = 2;
  if (this->_internal_rm_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rm_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionId::GetClassData() const { return &_class_data_; }


void ConnectionId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionId*>(&to_msg);
  auto& from = static_cast<const ConnectionId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.ConnectionId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fp_id() != 0) {
    _this->_internal_set_fp_id(from._internal_fp_id());
  }
  if (from._internal_rm_id() != 0) {
    _this->_internal_set_rm_id(from._internal_rm_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionId::CopyFrom(const ConnectionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.ConnectionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionId::IsInitialized() const {
  return true;
}

void ConnectionId::InternalSwap(ConnectionId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionId, _impl_.rm_id_)
      + sizeof(ConnectionId::_impl_.rm_id_)
      - PROTOBUF_FIELD_OFFSET(ConnectionId, _impl_.fp_id_)>(
          reinterpret_cast<char*>(&_impl_.fp_id_),
          reinterpret_cast<char*>(&other->_impl_.fp_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[0]);
}

// ===================================================================

class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._impl_._has_bits_);
  static const ::p2r::ConnectionId& connection_id(const Response* msg);
  static void set_has_connection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::p2r::ConnectionId&
Response::_Internal::connection_id(const Response* msg) {
  return *msg->_impl_.connection_id_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.cause_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_id()) {
    _this->_impl_.connection_id_ = new ::p2r::ConnectionId(*from._impl_.connection_id_);
  }
  _this->_impl_.cause_ = from._impl_.cause_;
  // @@protoc_insertion_point(copy_constructor:p2r.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.cause_){0}
  };
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:p2r.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_id_;
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.connection_id_ != nullptr);
    _impl_.connection_id_->Clear();
  }
  _impl_.cause_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p2r.Cause cause = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cause(static_cast<::p2r::Cause>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .p2r.ConnectionId connection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .p2r.Cause cause = 1;
  if (this->_internal_cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cause(), target);
  }

  // optional .p2r.ConnectionId connection_id = 2;
  if (_internal_has_connection_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::connection_id(this),
        _Internal::connection_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .p2r.ConnectionId connection_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_id_);
  }

  // .p2r.Cause cause = 1;
  if (this->_internal_cause() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cause());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_id()) {
    _this->_internal_mutable_connection_id()->::p2r::ConnectionId::MergeFrom(
        from._internal_connection_id());
  }
  if (from._internal_cause() != 0) {
    _this->_internal_set_cause(from._internal_cause());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, _impl_.cause_)
      + sizeof(Response::_impl_.cause_)
      - PROTOBUF_FIELD_OFFSET(Response, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[1]);
}

// ===================================================================

class SetupRequest::_Internal {
 public:
  static const ::p2r::ConnectionId& connection_id(const SetupRequest* msg);
};

const ::p2r::ConnectionId&
SetupRequest::_Internal::connection_id(const SetupRequest* msg) {
  return *msg->_impl_.connection_id_;
}
SetupRequest::SetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.SetupRequest)
}
SetupRequest::SetupRequest(const SetupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_id()) {
    _this->_impl_.connection_id_ = new ::p2r::ConnectionId(*from._impl_.connection_id_);
  }
  // @@protoc_insertion_point(copy_constructor:p2r.SetupRequest)
}

inline void SetupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupRequest::~SetupRequest() {
  // @@protoc_insertion_point(destructor:p2r.SetupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_id_;
}

void SetupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.SetupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p2r.ConnectionId connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.SetupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection_id(this),
        _Internal::connection_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.SetupRequest)
  return target;
}

size_t SetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.SetupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupRequest::GetClassData() const { return &_class_data_; }


void SetupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupRequest*>(&to_msg);
  auto& from = static_cast<const SetupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.SetupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_id()) {
    _this->_internal_mutable_connection_id()->::p2r::ConnectionId::MergeFrom(
        from._internal_connection_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupRequest::CopyFrom(const SetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.SetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupRequest::IsInitialized() const {
  return true;
}

void SetupRequest::InternalSwap(SetupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.connection_id_, other->_impl_.connection_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[2]);
}

// ===================================================================

class ReleaseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseRequest>()._impl_._has_bits_);
  static const ::p2r::ConnectionId& connection_id(const ReleaseRequest* msg);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::p2r::ConnectionId&
ReleaseRequest::_Internal::connection_id(const ReleaseRequest* msg) {
  return *msg->_impl_.connection_id_;
}
ReleaseRequest::ReleaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.ReleaseRequest)
}
ReleaseRequest::ReleaseRequest(const ReleaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReleaseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.connection_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_connection_id()) {
    _this->_impl_.connection_id_ = new ::p2r::ConnectionId(*from._impl_.connection_id_);
  }
  // @@protoc_insertion_point(copy_constructor:p2r.ReleaseRequest)
}

inline void ReleaseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.connection_id_){nullptr}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReleaseRequest::~ReleaseRequest() {
  // @@protoc_insertion_point(destructor:p2r.ReleaseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReleaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.connection_id_;
}

void ReleaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReleaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.ReleaseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p2r.ConnectionId connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "p2r.ReleaseRequest.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.ReleaseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection_id(this),
        _Internal::connection_id(this).GetCachedSize(), target, stream);
  }

  // optional string reason = 2;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "p2r.ReleaseRequest.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.ReleaseRequest)
  return target;
}

size_t ReleaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.ReleaseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReleaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseRequest::GetClassData() const { return &_class_data_; }


void ReleaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReleaseRequest*>(&to_msg);
  auto& from = static_cast<const ReleaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.ReleaseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_connection_id()) {
    _this->_internal_mutable_connection_id()->::p2r::ConnectionId::MergeFrom(
        from._internal_connection_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseRequest::CopyFrom(const ReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.ReleaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseRequest::IsInitialized() const {
  return true;
}

void ReleaseRequest::InternalSwap(ReleaseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.connection_id_, other->_impl_.connection_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[3]);
}

// ===================================================================

class TerminateWarning::_Internal {
 public:
  static const ::p2r::ConnectionId& connection_id(const TerminateWarning* msg);
};

const ::p2r::ConnectionId&
TerminateWarning::_Internal::connection_id(const TerminateWarning* msg) {
  return *msg->_impl_.connection_id_;
}
TerminateWarning::TerminateWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.TerminateWarning)
}
TerminateWarning::TerminateWarning(const TerminateWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminateWarning* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.warning_id_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_id()) {
    _this->_impl_.connection_id_ = new ::p2r::ConnectionId(*from._impl_.connection_id_);
  }
  ::memcpy(&_impl_.reason_, &from._impl_.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timeout_) -
    reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.timeout_));
  // @@protoc_insertion_point(copy_constructor:p2r.TerminateWarning)
}

inline void TerminateWarning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.warning_id_){0}
    , decltype(_impl_.timeout_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TerminateWarning::~TerminateWarning() {
  // @@protoc_insertion_point(destructor:p2r.TerminateWarning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminateWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_id_;
}

void TerminateWarning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminateWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.TerminateWarning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
  ::memset(&_impl_.reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_) -
      reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateWarning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p2r.ConnectionId connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .p2r.TerminateReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::p2r::TerminateReason>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 warning_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.warning_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateWarning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.TerminateWarning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection_id(this),
        _Internal::connection_id(this).GetCachedSize(), target, stream);
  }

  // .p2r.TerminateReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // int32 warning_id = 3;
  if (this->_internal_warning_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_warning_id(), target);
  }

  // int32 timeout = 4;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.TerminateWarning)
  return target;
}

size_t TerminateWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.TerminateWarning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_id_);
  }

  // .p2r.TerminateReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // int32 warning_id = 3;
  if (this->_internal_warning_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warning_id());
  }

  // int32 timeout = 4;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminateWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateWarning::GetClassData() const { return &_class_data_; }


void TerminateWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminateWarning*>(&to_msg);
  auto& from = static_cast<const TerminateWarning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.TerminateWarning)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_id()) {
    _this->_internal_mutable_connection_id()->::p2r::ConnectionId::MergeFrom(
        from._internal_connection_id());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_warning_id() != 0) {
    _this->_internal_set_warning_id(from._internal_warning_id());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateWarning::CopyFrom(const TerminateWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.TerminateWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateWarning::IsInitialized() const {
  return true;
}

void TerminateWarning::InternalSwap(TerminateWarning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TerminateWarning, _impl_.timeout_)
      + sizeof(TerminateWarning::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(TerminateWarning, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateWarning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[4]);
}

// ===================================================================

class TerminateCancel::_Internal {
 public:
  static const ::p2r::ConnectionId& connection_id(const TerminateCancel* msg);
};

const ::p2r::ConnectionId&
TerminateCancel::_Internal::connection_id(const TerminateCancel* msg) {
  return *msg->_impl_.connection_id_;
}
TerminateCancel::TerminateCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.TerminateCancel)
}
TerminateCancel::TerminateCancel(const TerminateCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TerminateCancel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.warning_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_id()) {
    _this->_impl_.connection_id_ = new ::p2r::ConnectionId(*from._impl_.connection_id_);
  }
  _this->_impl_.warning_id_ = from._impl_.warning_id_;
  // @@protoc_insertion_point(copy_constructor:p2r.TerminateCancel)
}

inline void TerminateCancel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.warning_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TerminateCancel::~TerminateCancel() {
  // @@protoc_insertion_point(destructor:p2r.TerminateCancel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TerminateCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_id_;
}

void TerminateCancel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TerminateCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.TerminateCancel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
  _impl_.warning_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminateCancel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p2r.ConnectionId connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 warning_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.warning_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminateCancel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.TerminateCancel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection_id(this),
        _Internal::connection_id(this).GetCachedSize(), target, stream);
  }

  // int32 warning_id = 2;
  if (this->_internal_warning_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_warning_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.TerminateCancel)
  return target;
}

size_t TerminateCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.TerminateCancel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_id_);
  }

  // int32 warning_id = 2;
  if (this->_internal_warning_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_warning_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminateCancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TerminateCancel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminateCancel::GetClassData() const { return &_class_data_; }


void TerminateCancel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TerminateCancel*>(&to_msg);
  auto& from = static_cast<const TerminateCancel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.TerminateCancel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_id()) {
    _this->_internal_mutable_connection_id()->::p2r::ConnectionId::MergeFrom(
        from._internal_connection_id());
  }
  if (from._internal_warning_id() != 0) {
    _this->_internal_set_warning_id(from._internal_warning_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminateCancel::CopyFrom(const TerminateCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.TerminateCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateCancel::IsInitialized() const {
  return true;
}

void TerminateCancel::InternalSwap(TerminateCancel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TerminateCancel, _impl_.warning_id_)
      + sizeof(TerminateCancel::_impl_.warning_id_)
      - PROTOBUF_FIELD_OFFSET(TerminateCancel, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminateCancel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[5]);
}

// ===================================================================

class RestoreWarning::_Internal {
 public:
  static const ::p2r::ConnectionId& connection_id(const RestoreWarning* msg);
};

const ::p2r::ConnectionId&
RestoreWarning::_Internal::connection_id(const RestoreWarning* msg) {
  return *msg->_impl_.connection_id_;
}
RestoreWarning::RestoreWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:p2r.RestoreWarning)
}
RestoreWarning::RestoreWarning(const RestoreWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RestoreWarning* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_id()) {
    _this->_impl_.connection_id_ = new ::p2r::ConnectionId(*from._impl_.connection_id_);
  }
  _this->_impl_.timeout_ = from._impl_.timeout_;
  // @@protoc_insertion_point(copy_constructor:p2r.RestoreWarning)
}

inline void RestoreWarning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_){nullptr}
    , decltype(_impl_.timeout_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RestoreWarning::~RestoreWarning() {
  // @@protoc_insertion_point(destructor:p2r.RestoreWarning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RestoreWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.connection_id_;
}

void RestoreWarning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RestoreWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:p2r.RestoreWarning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.connection_id_ != nullptr) {
    delete _impl_.connection_id_;
  }
  _impl_.connection_id_ = nullptr;
  _impl_.timeout_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreWarning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .p2r.ConnectionId connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RestoreWarning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:p2r.RestoreWarning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::connection_id(this),
        _Internal::connection_id(this).GetCachedSize(), target, stream);
  }

  // int32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:p2r.RestoreWarning)
  return target;
}

size_t RestoreWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p2r.RestoreWarning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .p2r.ConnectionId connection_id = 1;
  if (this->_internal_has_connection_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_id_);
  }

  // int32 timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestoreWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RestoreWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestoreWarning::GetClassData() const { return &_class_data_; }


void RestoreWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RestoreWarning*>(&to_msg);
  auto& from = static_cast<const RestoreWarning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:p2r.RestoreWarning)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connection_id()) {
    _this->_internal_mutable_connection_id()->::p2r::ConnectionId::MergeFrom(
        from._internal_connection_id());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RestoreWarning::CopyFrom(const RestoreWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p2r.RestoreWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreWarning::IsInitialized() const {
  return true;
}

void RestoreWarning::InternalSwap(RestoreWarning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestoreWarning, _impl_.timeout_)
      + sizeof(RestoreWarning::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(RestoreWarning, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreWarning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_P2r_2eproto_getter, &descriptor_table_P2r_2eproto_once,
      file_level_metadata_P2r_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2r
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::p2r::ConnectionId*
Arena::CreateMaybeMessage< ::p2r::ConnectionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::ConnectionId >(arena);
}
template<> PROTOBUF_NOINLINE ::p2r::Response*
Arena::CreateMaybeMessage< ::p2r::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::p2r::SetupRequest*
Arena::CreateMaybeMessage< ::p2r::SetupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::SetupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p2r::ReleaseRequest*
Arena::CreateMaybeMessage< ::p2r::ReleaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::ReleaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::p2r::TerminateWarning*
Arena::CreateMaybeMessage< ::p2r::TerminateWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::TerminateWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::p2r::TerminateCancel*
Arena::CreateMaybeMessage< ::p2r::TerminateCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::TerminateCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::p2r::RestoreWarning*
Arena::CreateMaybeMessage< ::p2r::RestoreWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::p2r::RestoreWarning >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
